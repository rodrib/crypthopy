import streamlit as st

st.title(":üßÆ : Aritm√©tica Modular")

st.write("La aritm√©tica modular es un sistema matem√°tico que trata con n√∫meros enteros, pero en lugar de trabajar con n√∫meros continuos, se enfoca en los residuos de la divisi√≥n.")

st.write("**Definici√≥n b√°sica:**")

st.write("En la aritm√©tica modular, dos n√∫meros enteros se consideran equivalentes si tienen el mismo residuo cuando se dividen por un n√∫mero fijo llamado m√≥dulo. Si dos n√∫meros 'a' y 'b' tienen el mismo residuo cuando se dividen por el m√≥dulo 'p', se escriben como 'a ‚â° b (mod p)'.")

st.write("**Ejemplo:**")

st.write("Si el m√≥dulo es 5, entonces 8 y 3 son equivalentes m√≥dulo 5, ya que ambos tienen un residuo de 3 cuando se dividen por 5. Por lo tanto, '8 ‚â° 3 (mod 5)'.")

st.write("**Operaciones b√°sicas:**")

st.write("- **Adici√≥n:** La suma de dos n√∫meros m√≥dulo 'p' es el residuo de la suma cuando se divide por 'p'.")
st.write("- **Sustracci√≥n:** La resta de dos n√∫meros m√≥dulo 'p' es el residuo de la resta cuando se divide por 'p'.")
st.write("- **Multiplicaci√≥n:** El producto de dos n√∫meros m√≥dulo 'p' es el residuo del producto cuando se divide por 'p'.")
st.write("- **Exponentiaci√≥n:** El resultado de elevar un n√∫mero a una potencia m√≥dulo 'p' es el residuo de la potencia cuando se divide por 'p'.")

st.write("**Grupos en Aritm√©tica Modular:**")

st.write("En el contexto de la aritm√©tica modular, un grupo es un conjunto de elementos junto con una operaci√≥n binaria que satisface las propiedades de cierre, asociatividad, identidad e inverso. Los grupos pueden ser aditivos o multiplicativos.")

st.write("**Grupo Aditivo:**")

st.write("El conjunto de n√∫meros enteros m√≥dulo 'p' con la operaci√≥n de adici√≥n forma un grupo abeliano. Este grupo cumple las siguientes propiedades:")
st.write("- **Cierre:** Si 'a' y 'b' est√°n en el conjunto, entonces 'a + b' tambi√©n est√° en el conjunto.")
st.write("- **Asociatividad:** La suma es asociativa: '((a + b) + c) ‚â° (a + (b + c)) (mod p)'.")
st.write("- **Identidad:** Existe un elemento identidad '0' tal que 'a + 0 ‚â° a (mod p)' para todo 'a' en el conjunto.")
st.write("- **Inverso:** Para cada 'a', existe un inverso '-a' tal que 'a + (-a) ‚â° 0 (mod p)'.")

st.write("**Grupo Multiplicativo:**")

st.write("El conjunto de n√∫meros enteros coprimos con 'p' (es decir, aquellos entre 1 y p-1 que no tienen factores comunes con 'p') con la operaci√≥n de multiplicaci√≥n forma un grupo multiplicativo. Este grupo cumple las siguientes propiedades:")
st.write("- **Cierre:** Si 'a' y 'b' est√°n en el conjunto, entonces 'a * b' tambi√©n est√° en el conjunto.")
st.write("- **Asociatividad:** La multiplicaci√≥n es asociativa: '((a * b) * c) ‚â° (a * (b * c)) (mod p)'.")
st.write("- **Identidad:** Existe un elemento identidad '1' tal que 'a * 1 ‚â° a (mod p)' para todo 'a' en el conjunto.")
st.write("- **Inverso:** Para cada 'a', existe un inverso 'a^(-1)' tal que 'a * a^(-1) ‚â° 1 (mod p)'. Este inverso existe si y solo si 'a' es coprimo con 'p'.")

st.write("**Reglas de la Aritm√©tica Modular:**")

st.write("Las operaciones b√°sicas de la aritm√©tica modular incluyen:")
st.write("- **Adici√≥n:** '(a + b) mod p'.")
st.write("- **Sustracci√≥n:** '(a - b) mod p'.")
st.write("- **Multiplicaci√≥n:** '(a * b) mod p'.")
st.write("- **Exponentiaci√≥n:** '(a^b) mod p'. Esto se calcula de manera eficiente mediante el algoritmo de exponenciaci√≥n modular.")





# T√≠tulo y descripci√≥n principal
st.title(":closed_lock_with_key: Intercambio de Claves Diffie-Hellman")

# Descripci√≥n del protocolo Diffie-Hellman
st.markdown("""
El intercambio de claves **Diffie-Hellman (D-H)** es un protocolo fundamental que permite a dos partes establecer una clave secreta compartida a trav√©s de un canal inseguro, como internet.

### Ejemplo de funcionamiento:

1. **Alice y Bob acuerdan un m√≥dulo grande** `p` **y un generador** `g`.
2. **Alice elige un secreto aleatorio** `a` **y calcula** `A = g^a mod p`.
3. **Bob elige un secreto aleatorio** `b` **y calcula** `B = g^b mod p`.
4. **Alice env√≠a** `A` **a Bob y Bob env√≠a** `B` **a Alice**.
5. **Alice calcula** `K = B^a mod p`.
6. **Bob calcula** `K = A^b mod p`.

### Seguridad:

La seguridad del protocolo D-H se basa en la dificultad de calcular el logaritmo discreto.

### Problema del logaritmo discreto:

- **Definici√≥n:** Dado un m√≥dulo `p`, un generador `g` y un elemento `h` en el grupo c√≠clico `Z/pZ`, encontrar el entero `x` tal que `g^x = h mod p`.

### Dificultad:

El problema del logaritmo discreto se considera computacionalmente dif√≠cil para m√≥dulos grandes. No se conoce un algoritmo eficiente para resolverlo en general.
""")

st.markdown("""
    ### Compromiso

En 1976, Whitfield Diffie y Martin Hellman publicaron un m√©todo para establecer un secreto compartido entre dos partes, permitiendo un canal de comunicaci√≥n eficiente. Este m√©todo genera una llave privada conocida por ambas partes para encriptar y desencriptar informaci√≥n sim√©tricamente. Aunque la criptograf√≠a asim√©trica es ineficiente para compartir muchos mensajes extensos, es ideal para compartir una llave de encriptaci√≥n sim√©trica.

El protocolo Diffie-Hellman establece un canal de comunicaci√≥n asim√©trica para compartir informaci√≥n en una √∫nica ocasi√≥n por sesi√≥n. Las partes generan una llave sim√©trica a partir de sus claves privadas y p√∫blicas, permitiendo un canal de comunicaci√≥n sim√©trico descifrable solo por ellos con una llave compartida.
""")

st.markdown("""
    ### Protocolo
""")

import base64
# Nota antes de la animaci√≥n
st.markdown("**Nota:** En la animaci√≥n que sigue, cada parte tiene un espacio privado (seguro para los secretos) y comparten un espacio p√∫blico disponible para ellos y cualquier tercero.")

# URL de la animaci√≥n GIF
animation_url = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-1.gif"

# Mostrar la animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url}" alt="Animaci√≥n del intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# Segunda parte de la descripci√≥n
st.markdown("""
            
En lugar de Alice y Bob definir una llave p√∫blica y una llave privada respectivamente, solo nos interesa que definan su llave privada (`a` y `b`) y que acuerden entre s√≠, expuestos al p√∫blico, dos valores `g` y `p`.
""")

# URL de la segunda animaci√≥n GIF
animation_url_2 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-2.gif"

# Mostrar la segunda animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_2}" alt="Animaci√≥n del intercambio de claves Diffie-Hellman, segunda parte">', unsafe_allow_html=True)

# Tercera parte de la descripci√≥n
st.markdown("""
Note que al pie de cada regi√≥n llevamos un registro de las variables a las que han tenido acceso sus respectivos usuarios.
""")

# URL de la tercera animaci√≥n GIF
animation_url_3 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-3.gif"

# Mostrar la tercera animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_3}" alt="Registro de variables en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# Cuarta parte de la descripci√≥n
st.markdown("""
Con sus respectivas claves privadas, Alice y Bob computan un valor combinado con el generador `g` (recuerde que `g` es p√∫blico). Este proceso de ‚Äòmezclar‚Äô los valores tiene un sentido matem√°tico espec√≠fico que impide que se pueda deshacer la operaci√≥n (No es imposible pero s√≠ en exceso dif√≠cil y costoso). Respectivamente, Alice y Bob produjeron los valores `ag` y `bg` de los cuales no se pueden inferir las claves privadas `a` y `b`. Sin `p`, esta operaci√≥n es imposible.
""")

# URL de la cuarta animaci√≥n GIF
animation_url_4 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-4.gif"

# Mostrar la cuarta animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_4}" alt="Proceso de mezclar valores en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# Quinta parte de la descripci√≥n
st.markdown("""
Una vez generados estos cifrados, Alice y Bob los intercambian. Note que como a√∫n no hay un canal seguro de comunicaci√≥n, `ag` y `bg` son p√∫blicos.
""")

# URL de la quinta animaci√≥n GIF
animation_url_5 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-5.gif"

# Mostrar la quinta animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_5}" alt="Intercambio de cifrados en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)

# Sexta parte de la descripci√≥n
st.markdown("""
Nuevamente realizamos la operaci√≥n de ‚Äòmezclado‚Äô. Alice mezclar√° el cifrado p√∫blico que acaba de recibir de Bob con su clave privada (`bg` con `a`, produce `abg`). Bob, har√° lo mismo con su clave privada y el cifrado p√∫blico que recibi√≥ de Alice (`ag` con `b`, produce `abg`).
""")

# URL de la sexta animaci√≥n GIF
animation_url_6 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-6.gif"

# Mostrar la sexta animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_6}" alt="Operaci√≥n de mezclado en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


# S√©ptima parte de la descripci√≥n
st.markdown("""
Note que ahora Alice y Bob comparten un cifrado irreversible (id√©ntico para ambos) el cual pueden utilizar para encriptar cualquier mensaje consecuente. Alice y Bob pueden ahora establecer un canal de comunicaci√≥n seguro, con encriptaci√≥n sim√©trica.

Veamos ahora, que √∫nicamente Alice y Bob pueden generar la llave sim√©trica `abg`. El p√∫blico tiene acceso al generador `g`, el valor `p` y las llaves cifradas `ag` y `bg`. No hay forma de ‚Äòmezclar‚Äô estos valores de forma tal que generen `abg`. Intentar ‚Äòmezclar‚Äô `bg` con `ag` producir√≠a algo como `abgg`, lo cual es un valor completamente distinto y que no sirve para descifrar los mensajes entre Alice y Bob. ¬°Hemos establecido un canal seguro de encriptaci√≥n sim√©trica!
""")

# URL de la s√©ptima animaci√≥n GIF
animation_url_7 = "https://mantimantilla.github.io/Theory-of-Computation-Encryption/_images/Animacion-7.gif"

# Mostrar la s√©ptima animaci√≥n desde la URL
st.markdown(f'<img src="{animation_url_7}" alt="Establecimiento de canal seguro en el intercambio de claves Diffie-Hellman">', unsafe_allow_html=True)


import streamlit as st

st.markdown("""
Vulnerabilidades
---

El procedimiento parece robusto, pero su intenci√≥n es solo escudar a 2 partidos de un ojo fisg√≥n. ¬øQu√© pasa cuando introducimos a una tercera parte, Mallory, que tiene el poder de interceptar y manipular mensajes entre partes en la red? Tenemos tambi√©n la preocupaci√≥n de que informaci√≥n secreta de alguna de las partes sea liberada al p√∫blico. ¬øPodemos satisfacer que los mensajes previos est√°n seguros?

Ataque de intermediario (Man in the Middle)
---

Suponga un mismo escenario donde Alice y Bob quieren establecer un canal de comunicaci√≥n de encriptaci√≥n sim√©trica, solo que ahora una tercera parte, Mallory, puede intervenir sobre la informaci√≥n que viaja en la red. Por ejemplo, si Alice quisiera mandar su propuesta de un generador `g` a Bob, Mallory sabr√≠a que esto est√° sucediendo evitar que esto suceda, o escoger su propio mensaje para enviarle a Bob. Note que hasta ahora, nuestro m√©todo de comunicaci√≥n no tiene forma de validar el origen de un mensaje en la red, por lo que Mallory puede estar seguro de que su intromisi√≥n en el canal de Alice y Bob no es detectable (a√∫n).

El concepto de este ataque es bastante sencillo. Todo lo que debe hacer Mallory para poder interpretar todos los futuros mensaje entre Alice y Bob es suplantarlos al momento de generar la llave compartida, de forma que Mallory comparte una llave con Bob y una con Alice.

1. Alice y Bob acuerdan un `g` y `p` p√∫blicos y generan sus llaves privadas respectivas.
2. Alice genera `ag` y lo publica en la red con la intenci√≥n de que lo reciba Bob. Bob hace lo mismo para Alice con `bg`.
3. Mallory intercepta estos mensajes y evita que lleguen al destinatario correspondiente.
4. Mallory genera su propia llave privada `m` y produce `mg`.
5. Mallory responde a Alice con `mg` suplantando a Bob. Alice cree que lo que acaba de recibir es `bg`.
6. Mallory responde a Bob con `mg` suplantando a Alice. Bob cree que lo que acaba de recibir es `ag`.
7. Alice y Bob calculan respectivamente `mag` y `mbg`.
8. Mallory calcula `mag` y `mbg`. Ahora comparte un secreto con el cual establecer un canal encriptado sim√©trico con ambos Alice y Bob. Estos no se han percatado del ataque.

Cualquier cifrado enviado por Alice con la intenci√≥n de que lo reciba √∫nicamente Bob, llega primero a Mallory. Mallory puede decidir hacer lo que quiera con este. Si la intenci√≥n es solo mediar la comunicaci√≥n entre Alice y Bob, Mallory debe descifrar el cifrado entrante y encriptarlo con el secreto contrario. Esto le permite editarlo, borrarlo, o incluso compartirlo con otros.

Esta vulnerabilidad fue descubierta pronto, por lo cual se volvi√≥ una pr√°ctica com√∫n agregar un paso de autenticaci√≥n al cifrado sim√©trico. Entran ahora en juego las llaves p√∫blicas.

Forward secrecy (PFS)
---

Forward secrecy es la intenci√≥n de proteger mensajes pasados en caso de que su cifrado haya sido guardado por terceros y el secreto compartido sea publicado. En este caso, la responsabilidad sobre la liberaci√≥n de estos mensajes no recae sobre alguna falla de Diffie-Hellman. En un inicio mencionamos la noci√≥n de una sesi√≥n de comunicaci√≥n. La idea de tener sesiones cortas sobre las cuales habilitar el canal de comunicaci√≥n es beneficiosa ya que cada vez que se inicie una sesi√≥n, la llave compartida puede generarse desde cero en cada ocasi√≥n, de forma que, si se libera la clave, solo los mensajes de esa sesi√≥n son vulnerables. En teor√≠a, nada impide que utilicemos una nueva llave para cada mensaje o para cada sub-cadena de 126 bits o menos. Recordemos que comunicarse por encriptaci√≥n asim√©trica es un proceso costoso, por lo que quisi√©ramos minimizar su uso. Cada vez que intercambiamos claves y generamos un secreto compartido estamos efectuando encriptaci√≥n asim√©trica, ya depende de los due√±os del canal establecer la frecuencia con la que se generan estas llaves ef√≠meras.
""")

